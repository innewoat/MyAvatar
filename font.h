#pragma once
#ifndef FONT_H
#define FONT_H

const static int FONT_SIZE = 16;

typedef unsigned char Font[(FONT_SIZE / 8) * FONT_SIZE];

class Fonts {
public:
	static Fonts& get_instance() {
		static Fonts fonts;
		return fonts;
	}

	Font& get_font(char c) {
		return *fonts[c];
	}

private:
	Font* fonts[256];
	Font empty = {
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	};
	Font A = {
		0x00,0x00,0x00,0x00,0x01,0x80,0x02,0x40,
		0x04,0x20,0x08,0x10,0x10,0x08,0x10,0x08,
		0x10,0x08,0x1f,0xf8,0x10,0x08,0x10,0x08,
		0x10,0x08,0x10,0x08,0x00,0x00,0x00,0x00,
	};
	Font B = {
		0x00,0x00,0x00,0x00,0x0f,0xe0,0x08,0x18,
		0x08,0x04,0x08,0x04,0x08,0x08,0x0d,0x50,
		0x0a,0xa0,0x08,0x08,0x08,0x04,0x08,0x04,
		0x08,0x18,0x0f,0xe0,0x00,0x00,0x00,0x00
	};
	Font C = {
		0x00,0x00,0x00,0x00,0x03,0xc0,0x04,0x20,
		0x08,0x10,0x10,0x08,0x10,0x08,0x10,0x00,
		0x10,0x00,0x10,0x08,0x10,0x08,0x08,0x10,
		0x04,0x20,0x03,0xc0,0x00,0x00,0x00,0x00
	};
	Font D = {
		0x00,0x00,0x00,0x00,0x1f,0xc0,0x10,0x20,
		0x10,0x10,0x10,0x08,0x10,0x08,0x10,0x08,
		0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x10,
		0x10,0x20,0x1f,0xc0,0x00,0x00,0x00,0x00
	};
	Font E = {
		0x00,0x00,0x00,0x00,0x1f,0xf0,0x10,0x00,
		0x10,0x00,0x10,0x00,0x10,0x00,0x15,0x40,
		0x1a,0xa0,0x10,0x00,0x10,0x00,0x10,0x00,
		0x10,0x00,0x1f,0xf0,0x00,0x00,0x00,0x00
	};
	Font F = {
		0x00,0x00,0x00,0x00,0x1f,0xf1,0x10,0x00,
		0x10,0x00,0x10,0x00,0x10,0x00,0x15,0x40,
		0x1a,0xa0,0x10,0x00,0x10,0x00,0x10,0x00,
		0x10,0x00,0x10,0x00,0x00,0x00,0x00,0x00
	};
	Font G = {
		0x00,0x00,0x00,0x00,0x03,0xc0,0x04,0x20,
		0x08,0x10,0x10,0x08,0x10,0x08,0x10,0x00,
		0x10,0x78,0x10,0x08,0x10,0x08,0x08,0x18,
		0x04,0x28,0x03,0xc0,0x00,0x00,0x00,0x00
	};
	Font H = {
		0x00,0x00,0x00,0x00,0x10,0x08,0x10,0x08,
		0x10,0x08,0x10,0x08,0x10,0x08,0x1a,0xa8,
		0x15,0x51,0x10,0x08,0x10,0x08,0x10,0x08,
		0x10,0x08,0x10,0x08,0x00,0x00,0x00,0x00
	};
	Font I = {
		0x00,0x00,0x00,0x00,0x07,0xe0,0x01,0x00,
		0x00,0x80,0x01,0x00,0x00,0x80,0x01,0x00,
		0x00,0x80,0x01,0x00,0x00,0x80,0x01,0x00,
		0x00,0x80,0x07,0xe0,0x00,0x00,0x00,0x00
	};
	Font J = {
		0x00,0x00,0x00,0x00,0x01,0xf8,0x00,0x20,
		0x00,0x40,0x00,0x20,0x00,0x40,0x00,0x20,
		0x00,0x40,0x00,0x20,0x10,0x40,0x10,0x20,
		0x08,0x40,0x08,0x20,0x07,0xc0,0x00,0x00
	};
	Font K = {
		0x00,0x00,0x00,0x00,0x08,0x10,0x08,0x20,
		0x08,0x40,0x08,0x80,0x09,0x00,0x0c,0x00,
		0x0a,0x00,0x09,0x00,0x08,0x80,0x08,0x40,
		0x08,0x20,0x08,0x10,0x00,0x00,0x00,0x00
	};
	Font L = {
		0x00,0x00,0x00,0x00,0x10,0x00,0x10,0x00,
		0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,
		0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,
		0x10,0x00,0x1f,0xf8,0x00,0x00,0x00,0x00
	};
	Font M = {
		0x00,0x00,0x00,0x00,0x10,0x08,0x18,0x18,
		0x14,0x28,0x14,0x28,0x14,0x28,0x12,0x48,
		0x14,0x28,0x12,0x48,0x14,0x28,0x11,0x88,
		0x10,0x08,0x10,0x08,0x00,0x00,0x00,0x00
	};
	Font N = {
		0x00,0x00,0x00,0x00,0x1c,0x08,0x14,0x08,
		0x12,0x08,0x12,0x08,0x11,0x08,0x11,0x08,
		0x10,0x88,0x10,0x88,0x10,0x48,0x10,0x48,
		0x10,0x28,0x10,0x38,0x00,0x00,0x00,0x00
	};
	Font O = {
		0x00,0x00,0x00,0x00,0x03,0xc0,0x04,0x20,
		0x08,0x10,0x10,0x08,0x10,0x08,0x10,0x08,
		0x10,0x08,0x10,0x08,0x10,0x08,0x08,0x10,
		0x04,0x20,0x03,0xc0,0x00,0x00,0x00,0x00
	};
	Font P = {
		0x00,0x00,0x00,0x00,0x1f,0xc0,0x10,0x30,
		0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x30,
		0x1f,0xc0,0x10,0x00,0x10,0x00,0x10,0x00,
		0x10,0x00,0x10,0x00,0x00,0x00,0x00,0x00
	};
	Font Q = {
		0x00,0x00,0x00,0x00,0x03,0xc0,0x04,0x20,
		0x08,0x10,0x10,0x08,0x10,0x08,0x10,0x08,
		0x10,0x08,0x10,0x88,0x10,0x48,0x08,0x10,
		0x04,0x30,0x03,0xc8,0x00,0x00,0x00,0x00
	};
	Font R = {
		0x00,0x00,0x00,0x00,0x1f,0xc0,0x10,0x30,
		0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x30,
		0x1f,0xc0,0x10,0x80,0x10,0x40,0x10,0x20,
		0x10,0x10,0x10,0x08,0x00,0x00,0x00,0x00
	};
	Font S = {
		0x00,0x00,0x00,0x00,0x07,0xe0,0x08,0x10,
		0x10,0x08,0x10,0x08,0x08,0x00,0x07,0x00,
		0x00,0xe0,0x00,0x10,0x10,0x08,0x10,0x08,
		0x08,0x10,0x07,0xe0,0x00,0x00,0x00,0x00
	};
	Font T = {
		0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xf8,
		0x01,0x00,0x00,0x80,0x01,0x00,0x00,0x80,
		0x01,0x00,0x00,0x80,0x01,0x00,0x00,0x80,
		0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	};
	Font U = {
		0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x08,
		0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,
		0x10,0x08,0x10,0x08,0x10,0x08,0x08,0x10,
		0x08,0x10,0x07,0xe0,0x00,0x00,0x00,0x00
	};
	Font V = {
		0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x08,
		0x10,0x08,0x10,0x08,0x08,0x10,0x08,0x10,
		0x08,0x10,0x04,0x20,0x04,0x20,0x02,0x40,
		0x02,0x40,0x01,0x80,0x00,0x00,0x00,0x00
	};
	Font W = {
		0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x04,
		0x20,0x04,0x20,0x04,0x11,0x08,0x10,0x88,
		0x12,0x48,0x0a,0x50,0x0a,0x50,0x0a,0x50,
		0x04,0x20,0x04,0x20,0x00,0x00,0x00,0x00
	};
	Font X = {
		0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x08,
		0x08,0x10,0x04,0x20,0x02,0x40,0x01,0x00,
		0x00,0x80,0x02,0x40,0x04,0x20,0x08,0x10,
		0x10,0x08,0x00,0x00,0x00,0x00,0x00,0x00
	};
	Font Y = {
		0x00,0x00,0x00,0x00,0x10,0x80,0x08,0x10,
		0x04,0x20,0x02,0x40,0x01,0x00,0x00,0x80,
		0x01,0x00,0x00,0x80,0x01,0x00,0x00,0x80,
		0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00
	};
	Font Z = {
		0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xf8,
		0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x80,
		0x01,0x00,0x02,0x00,0x04,0x00,0x08,0x00,
		0x1f,0xf8,0x00,0x00,0x00,0x00,0x00,0x00
	};
	Fonts() {
		initFonts();
	}

	void initFonts() {
		for (int i = 0; i < 256; i++) {
			fonts[i] = &empty;
		}

		fonts['a'] = &A; fonts['A'] = &A;
		fonts['b'] = &B; fonts['B'] = &B;
		fonts['c'] = &C; fonts['C'] = &C;
		fonts['d'] = &D; fonts['D'] = &D;
		fonts['e'] = &E; fonts['E'] = &E;
		fonts['f'] = &F; fonts['F'] = &F;
		fonts['g'] = &G; fonts['G'] = &G;
		fonts['h'] = &H; fonts['H'] = &H;
		fonts['i'] = &I; fonts['I'] = &I;
		fonts['j'] = &J; fonts['J'] = &J;
		fonts['k'] = &K; fonts['K'] = &K;
		fonts['l'] = &L; fonts['L'] = &L;
		fonts['m'] = &M; fonts['M'] = &M;
		fonts['n'] = &N; fonts['N'] = &N;
		fonts['o'] = &O; fonts['O'] = &O;
		fonts['p'] = &P; fonts['P'] = &P;
		fonts['q'] = &Q; fonts['Q'] = &Q;
		fonts['r'] = &R; fonts['R'] = &R;
		fonts['s'] = &S; fonts['S'] = &S;
		fonts['t'] = &T; fonts['T'] = &T;
		fonts['u'] = &U; fonts['U'] = &U;
		fonts['v'] = &V; fonts['V'] = &V;
		fonts['w'] = &W; fonts['W'] = &W;
		fonts['x'] = &X; fonts['X'] = &X;
		fonts['y'] = &Y; fonts['Y'] = &Y;
		fonts['z'] = &Z; fonts['Z'] = &Z;
	}
};

bool need_draw(Font& f, int x, int y) {
	int temp = 0x80;
	int target = y * FONT_SIZE + x;

	int n = target / 8;
	int m = target % 8;

	return (f[n] & (temp>>m)) != 0;
}


#endif // !FONT_H
